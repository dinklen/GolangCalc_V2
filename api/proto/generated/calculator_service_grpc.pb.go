// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: calculator_service.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Calculator_Calculate_FullMethodName = "/grpc.Calculator/Calculate"
)

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	Calculate(ctx context.Context, opts ...grpc.CallOption) (Calculator_CalculateClient, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Calculate(ctx context.Context, opts ...grpc.CallOption) (Calculator_CalculateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calculator_ServiceDesc.Streams[0], Calculator_Calculate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorCalculateClient{ClientStream: stream}
	return x, nil
}

type Calculator_CalculateClient interface {
	Send(*Subexpression) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type calculatorCalculateClient struct {
	grpc.ClientStream
}

func (x *calculatorCalculateClient) Send(m *Subexpression) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorCalculateClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	Calculate(Calculator_CalculateServer) error
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) Calculate(Calculator_CalculateServer) error {
	return status.Errorf(codes.Unimplemented, "method Calculate not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&Calculator_ServiceDesc, srv)
}

func _Calculator_Calculate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServer).Calculate(&calculatorCalculateServer{ServerStream: stream})
}

type Calculator_CalculateServer interface {
	Send(*Result) error
	Recv() (*Subexpression, error)
	grpc.ServerStream
}

type calculatorCalculateServer struct {
	grpc.ServerStream
}

func (x *calculatorCalculateServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorCalculateServer) Recv() (*Subexpression, error) {
	m := new(Subexpression)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Calculator_ServiceDesc is the grpc.ServiceDesc for Calculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Calculate",
			Handler:       _Calculator_Calculate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator_service.proto",
}
